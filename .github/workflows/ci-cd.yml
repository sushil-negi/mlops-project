name: Healthcare AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: healthcare-ai
  PYTHON_VERSION: '3.9'

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety mypy pytest pytest-cov
        if [ -f models/healthcare-ai/requirements.txt ]; then
          pip install -r models/healthcare-ai/requirements.txt
        fi
        if [ -f models/healthcare-ai-k8s/requirements.txt ]; then
          pip install -r models/healthcare-ai-k8s/requirements.txt
        fi
        if [ -f services/ab-testing/requirements.txt ]; then
          pip install -r services/ab-testing/requirements.txt
        fi

    - name: Code formatting check (Black)
      run: |
        black --check --diff models/ scripts/ tests/ services/ || exit 1

    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff models/ scripts/ tests/ services/ || exit 1

    - name: Linting (flake8)
      run: |
        flake8 models/ scripts/ tests/ services/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 models/ scripts/ tests/ services/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking (mypy)
      run: |
        mypy models/healthcare-ai/src/ --ignore-missing-imports || true
        mypy models/healthcare-ai-k8s/src/ --ignore-missing-imports || true
        mypy services/ab-testing/src/ --ignore-missing-imports || true

    - name: Security scan (bandit)
      run: |
        bandit -r models/ scripts/ services/ --severity-level medium || true

    - name: Dependency vulnerability scan (safety)
      run: |
        safety check || true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-mock
        # Install dependencies for unit tests
        python -m pip install scikit-learn==1.1.3 pandas==1.5.3 numpy==1.23.5 joblib==1.3.2
        if [ -f models/healthcare-ai/requirements.txt ]; then
          python -m pip install -r models/healthcare-ai/requirements.txt
        fi
        if [ -f models/healthcare-ai-k8s/requirements.txt ]; then
          python -m pip install -r models/healthcare-ai-k8s/requirements.txt
        fi
        if [ -f services/ab-testing/requirements.txt ]; then
          python -m pip install -r services/ab-testing/requirements.txt
        fi
        # Verify installations
        python -m pip list | grep pytest
        python -c "import pytest; print(f'pytest {pytest.__version__}')"

    - name: Run unit tests
      run: |
        cd tests
        python -m pytest unit/ -v --cov=../models --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./tests/coverage.xml
        flags: unittests
        name: codecov-umbrella

  model-validation:
    name: Model Validation & Testing
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-mock
        python -m pip install -r models/healthcare-ai/requirements.txt
        python -m pip install -r services/ab-testing/requirements.txt
        python -m pip install scikit-learn pandas numpy joblib requests

    - name: Download test data
      run: |
        mkdir -p test_data
        if [ -f data/test_healthcare_training.json ]; then
          cp data/test_healthcare_training.json test_data/
        fi

    - name: Start healthcare AI service for e2e tests
      run: |
        cd models/healthcare-ai
        python service.py &
        sleep 10

    - name: Validate model performance
      run: |
        cd tests
        python -m pytest integration/test_ml_classification_accuracy.py -v
        python -m pytest e2e/test_response_quality_validation.py -v

    - name: Healthcare-specific validation
      run: |
        python scripts/model_interaction_guide.py --validate-crisis-detection
        python scripts/test_mlops_pipeline.py --health-check

    - name: Start A/B testing service for validation
      run: |
        cd services/ab-testing
        # Start Redis for A/B testing
        docker run -d --name redis-test -p 6379:6379 redis:7-alpine
        sleep 5
        # Start A/B testing service
        REDIS_URL=redis://localhost:6379 python -m uvicorn src.main:app --host 0.0.0.0 --port 8090 &
        sleep 10
        # Test A/B service
        curl -f http://localhost:8090/health || exit 1
        curl -f http://localhost:8090/route/test-user-123 || exit 1

    - name: Model bias detection
      run: |
        python -c "
        import json
        import sys
        
        # Simple bias detection for healthcare categories
        with open('data/test_healthcare_training.json', 'r') as f:
            data = json.load(f)
        
        categories = {}
        for item in data:
            cat = item.get('category', 'unknown')
            categories[cat] = categories.get(cat, 0) + 1
        
        print('Category distribution:')
        for cat, count in categories.items():
            print(f'  {cat}: {count}')
        
        # Check for severe imbalance
        if len(categories) > 1:
            max_count = max(categories.values())
            min_count = min(categories.values())
            ratio = max_count / min_count if min_count > 0 else float('inf')
            
            if ratio > 10:
                print(f'WARNING: High class imbalance detected (ratio: {ratio:.2f})')
                sys.exit(1)
            else:
                print(f'Class balance acceptable (ratio: {ratio:.2f})')
        "

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: model-validation
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-mock
        python -m pip install -r models/healthcare-ai/requirements.txt
        python -m pip install pytest-asyncio httpx

    - name: Start healthcare AI service
      run: |
        cd models/healthcare-ai
        # Start service with error logging
        python service.py > ../../service.log 2>&1 &
        SERVICE_PID=$!
        echo "Started service with PID: $SERVICE_PID"
        sleep 15
        
        # Check if service is still running
        if kill -0 $SERVICE_PID 2>/dev/null; then
          echo "Service is running"
        else
          echo "Service crashed, showing logs:"
          cat ../../service.log
          exit 1
        fi
        
        # Wait for service to be ready
        for i in {1..30}; do
          if curl -s http://localhost:8080/health > /dev/null 2>&1; then
            echo "Service is ready"
            break
          fi
          echo "Waiting for service... attempt $i/30"
          sleep 2
        done

    - name: Run integration tests
      run: |
        cd tests
        python -m pytest integration/ -v --disable-warnings

    - name: API health check
      run: |
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/ready || exit 1

  build-and-scan:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Healthcare AI Docker image
      uses: docker/build-push-action@v4
      with:
        context: models/healthcare-ai
        file: models/healthcare-ai/Dockerfile
        push: false
        tags: healthcare-ai:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Build A/B Testing Docker image
      uses: docker/build-push-action@v4
      with:
        context: services/ab-testing
        file: services/ab-testing/Dockerfile
        push: false
        tags: ab-testing:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Build MLflow Docker image
      uses: docker/build-push-action@v4
      with:
        context: services/mlflow
        file: services/mlflow/Dockerfile
        push: false
        tags: mlflow-server:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Run Trivy vulnerability scanner on Healthcare AI
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'healthcare-ai:latest'
        format: 'sarif'
        output: 'trivy-healthcare-ai.sarif'
      continue-on-error: true

    - name: Run Trivy vulnerability scanner on A/B Testing
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ab-testing:latest'
        format: 'sarif'
        output: 'trivy-ab-testing.sarif'
      continue-on-error: true

    - name: Upload Healthcare AI Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-healthcare-ai.sarif') != ''
      with:
        sarif_file: 'trivy-healthcare-ai.sarif'
        category: 'healthcare-ai-security'
      continue-on-error: true

    - name: Upload A/B Testing Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-ab-testing.sarif') != ''
      with:
        sarif_file: 'trivy-ab-testing.sarif'
        category: 'ab-testing-security'
      continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        if [ -n "${{ secrets.KUBE_CONFIG }}" ]; then
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          kubectl config current-context
        else
          echo "No KUBE_CONFIG found, skipping kubectl configuration"
          exit 0
        fi
      continue-on-error: true

    - name: Deploy to staging
      run: |
        if [ -f $HOME/.kube/config ]; then
          kubectl apply -f k8s/environments/staging/
          kubectl rollout status deployment/healthcare-ai -n healthcare-ai-staging --timeout=300s
          kubectl rollout status deployment/ab-testing -n healthcare-ai-staging --timeout=300s
          kubectl rollout status deployment/mlflow -n healthcare-ai-staging --timeout=300s
        else
          echo "Kubernetes not configured, skipping deployment"
        fi
      continue-on-error: true

    - name: Verify staging deployment
      run: |
        if [ -f $HOME/.kube/config ]; then
          kubectl get pods -n healthcare-ai-staging
          kubectl port-forward -n healthcare-ai-staging service/healthcare-ai 8081:8000 &
          sleep 10
          curl -f http://localhost:8081/health || exit 1
          # Test A/B testing service
          kubectl port-forward -n healthcare-ai-staging service/ab-testing 8082:8000 &
          sleep 5
          curl -f http://localhost:8082/health || exit 1
        else
          echo "Kubernetes not configured, skipping verification"
        fi
      continue-on-error: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        if [ -n "${{ secrets.KUBE_CONFIG }}" ]; then
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          kubectl config current-context
        else
          echo "No KUBE_CONFIG found, skipping kubectl configuration"
          exit 0
        fi
      continue-on-error: true

    - name: Deploy to production
      run: |
        if [ -f $HOME/.kube/config ]; then
          kubectl apply -f k8s/environments/production/staging/
          kubectl rollout status deployment/healthcare-ai -n healthcare-ai-production --timeout=600s
          kubectl rollout status deployment/ab-testing -n healthcare-ai-production --timeout=300s
          kubectl rollout status deployment/mlflow -n healthcare-ai-production --timeout=300s
        else
          echo "Kubernetes not configured, skipping deployment"
        fi
      continue-on-error: true

    - name: Verify production deployment
      run: |
        if [ -f $HOME/.kube/config ]; then
          kubectl get pods -n healthcare-ai-production
        else
          echo "Kubernetes not configured, skipping verification"
        fi
      continue-on-error: true

    - name: Health check production deployment
      run: |
        if [ -f $HOME/.kube/config ]; then
          kubectl port-forward -n healthcare-ai-production service/healthcare-ai 8083:8000 &
          sleep 10
          curl -f http://localhost:8083/health || exit 1
          # Test A/B testing service
          kubectl port-forward -n healthcare-ai-production service/ab-testing 8084:8000 &
          sleep 5
          curl -f http://localhost:8084/health || exit 1
        else
          echo "Kubernetes not configured, skipping health check"
        fi
      continue-on-error: true

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always() && env.SLACK_WEBHOOK_URL != ''
      with:
        status: ${{ job.status }}
        text: Healthcare AI deployment to production ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        if [ -n "${{ secrets.KUBE_CONFIG }}" ]; then
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        else
          echo "No KUBE_CONFIG found, skipping kubectl configuration"
          exit 0
        fi
      continue-on-error: true

    - name: Rollback deployment
      run: |
        if [ -f $HOME/.kube/config ]; then
          NAMESPACE=${{ github.ref == 'refs/heads/main' && 'healthcare-ai-production' || 'healthcare-ai-staging' }}
          kubectl rollout undo deployment/healthcare-ai -n $NAMESPACE
          kubectl rollout undo deployment/ab-testing -n $NAMESPACE
          kubectl rollout undo deployment/mlflow -n $NAMESPACE
          kubectl rollout status deployment/healthcare-ai -n $NAMESPACE --timeout=300s
        else
          echo "Kubernetes not configured, skipping rollback"
        fi
      continue-on-error: true

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL != ''
      with:
        status: 'warning'
        text: 'Healthcare AI deployment failed - automatic rollback completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}