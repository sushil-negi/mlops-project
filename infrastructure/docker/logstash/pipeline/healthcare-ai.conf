input {
  beats {
    port => 5044
  }
  
  # Healthcare AI service logs
  tcp {
    port => 5000
    codec => json_lines
    add_field => { "service" => "healthcare-ai" }
  }
  
  # Model training logs
  tcp {
    port => 5001
    codec => json_lines
    add_field => { "service" => "model-training" }
  }
  
  # MLflow logs
  tcp {
    port => 5002
    codec => json_lines
    add_field => { "service" => "mlflow" }
  }
}

filter {
  # Parse JSON if it's a string
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Add timestamp if not present
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }
  
  # Healthcare AI specific parsing
  if [service] == "healthcare-ai" {
    # Extract user query patterns (anonymized)
    if [user_query] {
      mutate {
        add_field => { "query_length" => "%{[user_query][length]}" }
        add_field => { "query_category" => "%{[category]}" }
        remove_field => [ "user_query" ]  # Remove actual query for privacy
      }
    }
    
    # Parse response metrics
    if [response_time] {
      mutate {
        convert => { "response_time" => "float" }
      }
    }
    
    if [confidence] {
      mutate {
        convert => { "confidence" => "float" }
      }
    }
    
    # Flag crisis responses
    if [category] == "crisis" {
      mutate {
        add_field => { "alert_type" => "crisis_response" }
        add_field => { "priority" => "high" }
      }
    }
    
    # Performance alerting
    if [response_time] and [response_time] > 1.0 {
      mutate {
        add_field => { "alert_type" => "slow_response" }
        add_field => { "priority" => "medium" }
      }
    }
  }
  
  # Model training specific parsing
  if [service] == "model-training" {
    # Parse training metrics
    if [accuracy] {
      mutate {
        convert => { "accuracy" => "float" }
      }
    }
    
    if [loss] {
      mutate {
        convert => { "loss" => "float" }
      }
    }
    
    # Alert on poor model performance
    if [accuracy] and [accuracy] < 0.90 {
      mutate {
        add_field => { "alert_type" => "low_accuracy" }
        add_field => { "priority" => "high" }
      }
    }
  }
  
  # Add environment tags
  mutate {
    add_field => { "environment" => "${ENVIRONMENT:development}" }
    add_field => { "cluster" => "healthcare-ai" }
  }
  
  # Geoip for client IPs (if present and not internal)
  if [client_ip] and [client_ip] !~ /^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.|127\.)/ {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Remove sensitive fields
  mutate {
    remove_field => [ "password", "token", "api_key", "secret" ]
  }
}

output {
  # Main elasticsearch output
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "healthcare-ai-logs-%{+YYYY.MM.dd}"
    template_name => "healthcare-ai"
    template_pattern => "healthcare-ai-logs-*"
    template => {
      "index_patterns" => ["healthcare-ai-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "30s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "timestamp" => { "type" => "date" }
          "service" => { "type" => "keyword" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "category" => { "type" => "keyword" }
          "confidence" => { "type" => "float" }
          "response_time" => { "type" => "float" }
          "accuracy" => { "type" => "float" }
          "loss" => { "type" => "float" }
          "environment" => { "type" => "keyword" }
          "alert_type" => { "type" => "keyword" }
          "priority" => { "type" => "keyword" }
          "client_ip" => { "type" => "ip" }
          "user_agent" => { "type" => "text" }
        }
      }
    }
  }
  
  # Alerts to separate index
  if [alert_type] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "healthcare-ai-alerts-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (optional)
  if [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }
}